package com.taxcalculator.util;

import java.util.HashMap;
import java.util.Map;

public class SubScriptSuperScriptCodes {

  public static final Map<String, String> SUPER_SCRIPT_CODES = new HashMap<>();
  public static final Map<String, String> SUB_SCRIPT_CODES = new HashMap<>();
  static {
    SUPER_SCRIPT_CODES.put("0", "⁰");
    SUPER_SCRIPT_CODES.put("1", "¹");
    SUPER_SCRIPT_CODES.put("2", "²");
    SUPER_SCRIPT_CODES.put("3", "³");
    SUPER_SCRIPT_CODES.put("4", "⁴");
    SUPER_SCRIPT_CODES.put("5", "⁵");
    SUPER_SCRIPT_CODES.put("6", "⁶");
    SUPER_SCRIPT_CODES.put("7", "⁷");
    SUPER_SCRIPT_CODES.put("8", "⁸");
    SUPER_SCRIPT_CODES.put("9", "⁹");
    SUPER_SCRIPT_CODES.put("a", "ᵃ");
    SUPER_SCRIPT_CODES.put("b", "ᵇ");
    SUPER_SCRIPT_CODES.put("c", "ᶜ");
    SUPER_SCRIPT_CODES.put("d", "ᵈ");
    SUPER_SCRIPT_CODES.put("e", "ᵉ");
    SUPER_SCRIPT_CODES.put("f", "ᶠ");
    SUPER_SCRIPT_CODES.put("g", "ᵍ");
    SUPER_SCRIPT_CODES.put("h", "ʰ");
    SUPER_SCRIPT_CODES.put("i", "ⁱ");
    SUPER_SCRIPT_CODES.put("j", "ʲ");
    SUPER_SCRIPT_CODES.put("k", "ᵏ");
    SUPER_SCRIPT_CODES.put("l", "ˡ");
    SUPER_SCRIPT_CODES.put("m", "ᵐ");
    SUPER_SCRIPT_CODES.put("n", "ⁿ");
    SUPER_SCRIPT_CODES.put("o", "ᵒ");
    SUPER_SCRIPT_CODES.put("p", "ᵖ");
    SUPER_SCRIPT_CODES.put("r", "ʳ");
    SUPER_SCRIPT_CODES.put("s", "ˢ");
    SUPER_SCRIPT_CODES.put("t", "ᵗ");
    SUPER_SCRIPT_CODES.put("u", "ᵘ");
    SUPER_SCRIPT_CODES.put("v", "ᵛ");
    SUPER_SCRIPT_CODES.put("w", "ʷ");
    SUPER_SCRIPT_CODES.put("x", "ˣ");
    SUPER_SCRIPT_CODES.put("y", "ʸ");
    SUPER_SCRIPT_CODES.put("z", "ᶻ");
    SUPER_SCRIPT_CODES.put("A", "ᴬ");
    SUPER_SCRIPT_CODES.put("B", "ᴮ");
    SUPER_SCRIPT_CODES.put("D", "ᴰ");
    SUPER_SCRIPT_CODES.put("E", "ᴱ");
    SUPER_SCRIPT_CODES.put("G", "ᴳ");
    SUPER_SCRIPT_CODES.put("H", "ᴴ");
    SUPER_SCRIPT_CODES.put("I", "ᴵ");
    SUPER_SCRIPT_CODES.put("J", "ᴶ");
    SUPER_SCRIPT_CODES.put("K", "ᴷ");
    SUPER_SCRIPT_CODES.put("L", "ᴸ");
    SUPER_SCRIPT_CODES.put("M", "ᴹ");
    SUPER_SCRIPT_CODES.put("N", "ᴺ");
    SUPER_SCRIPT_CODES.put("O", "ᴼ");
    SUPER_SCRIPT_CODES.put("P", "ᴾ");
    SUPER_SCRIPT_CODES.put("R", "ᴿ");
    SUPER_SCRIPT_CODES.put("T", "ᵀ");
    SUPER_SCRIPT_CODES.put("U", "ᵁ");
    SUPER_SCRIPT_CODES.put("V", "ⱽ");
    SUPER_SCRIPT_CODES.put("W", "ᵂ");
    SUPER_SCRIPT_CODES.put("+", "⁺");
    SUPER_SCRIPT_CODES.put("-", "⁻");
    SUPER_SCRIPT_CODES.put("=", "⁼");
    SUPER_SCRIPT_CODES.put("(", "⁽");
    SUPER_SCRIPT_CODES.put(")", "⁾");
    SUPER_SCRIPT_CODES.put("TM", "™");
    SUPER_SCRIPT_CODES.put("™", "™");

    SUB_SCRIPT_CODES.put("0", "₀");
    SUB_SCRIPT_CODES.put("1", "₁");
    SUB_SCRIPT_CODES.put("2", "₂");
    SUB_SCRIPT_CODES.put("3", "₃");
    SUB_SCRIPT_CODES.put("4", "₄");
    SUB_SCRIPT_CODES.put("5", "₅");
    SUB_SCRIPT_CODES.put("6", "₆");
    SUB_SCRIPT_CODES.put("7", "₇");
    SUB_SCRIPT_CODES.put("8", "₈");
    SUB_SCRIPT_CODES.put("9", "₉");
    SUB_SCRIPT_CODES.put("a", "ₐ");
    SUB_SCRIPT_CODES.put("e", "ₑ");
    SUB_SCRIPT_CODES.put("h", "ₕ");
    SUB_SCRIPT_CODES.put("i", "ᵢ");
    SUB_SCRIPT_CODES.put("k", "ₖ");
    SUB_SCRIPT_CODES.put("l", "ₗ");
    SUB_SCRIPT_CODES.put("m", "ₘ");
    SUB_SCRIPT_CODES.put("n", "ₙ");
    SUB_SCRIPT_CODES.put("o", "ₒ");
    SUB_SCRIPT_CODES.put("p", "ₚ");
    SUB_SCRIPT_CODES.put("r", "ᵣ");
    SUB_SCRIPT_CODES.put("s", "ₛ");
    SUB_SCRIPT_CODES.put("t", "ₜ");
    SUB_SCRIPT_CODES.put("u", "ᵤ");
    SUB_SCRIPT_CODES.put("v", "ᵥ");
    SUB_SCRIPT_CODES.put("x", "ₓ");
    SUB_SCRIPT_CODES.put("+", "₊");
    SUB_SCRIPT_CODES.put("-", "₋");
    SUB_SCRIPT_CODES.put("=", "₌");
    SUB_SCRIPT_CODES.put("(", "₍");
    SUB_SCRIPT_CODES.put(")", "₎");
  }
}
